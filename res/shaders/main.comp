#version 450

#define CHUNK_SIZE 32
#define MAX_VOXEL_TRAVERSAL 64

layout (set = 0, binding = 0) uniform writeonly image2D writeImage;
layout (set = 1, binding = 0) uniform Camera {
    vec3 position;
    float _p4;
    mat4 rotation;
    vec2 screenSize;
} camera;
layout (set = 2, binding = 0) buffer Chunk {
    uvec4 voxels[(CHUNK_SIZE * CHUNK_SIZE * CHUNK_SIZE + 4) / 4];
};

struct Ray {
    vec3 o; // Origin
    vec3 d; // Direction
};

struct RaycastResult {
    bool hit;
    float t;
    vec4 color;
};

struct Sphere {
    vec3 c; // Center
    float r; // Radius
};

vec4 getVoxel(ivec3 pos) {
    if (pos.x < 0 || pos.y < 0 || pos.z < 0 || pos.x >= CHUNK_SIZE || pos.y >= CHUNK_SIZE || pos.z >= CHUNK_SIZE) {
        return vec4(0);
    }

    int index = pos.x + pos.y * CHUNK_SIZE + pos.z * CHUNK_SIZE * CHUNK_SIZE;

    uint rawColor = voxels[index / 4][index % 4];

    return vec4(
        float(rawColor >> 24 & 0xff) / 255.0,
        float(rawColor >> 16 & 0xff) / 255.0,
        float(rawColor >> 8 & 0xff) / 255.0,
        float(rawColor & 0xff) / 255.0
    );
}

RaycastResult rayVoxel(Ray ray) {

    RaycastResult rayHit;
    rayHit.hit = false;
    
    ivec3 pos = ivec3(floor(ray.o));

    vec4 startVoxel = getVoxel(pos);
    if (startVoxel.a > 0.01) {
        rayHit.hit = true;
        rayHit.color = startVoxel;
        rayHit.t = 0;
        return rayHit;
    }
    
    ivec3 inc = ivec3(sign(ray.d));
    vec3 tDelta = 1.0 / abs(ray.d);
    vec3 tMax = (pos - ray.o - min(-inc, 0)) / ray.d;

    rayHit.color = vec4(0, 0, 0, 1);
    
    float dist = 0;
    vec3 normal;

    for (uint i = 0; i < MAX_VOXEL_TRAVERSAL; i++) {
        // X is next
        if (tMax.x < tMax.y && tMax.x < tMax.z) {
            pos.x += inc.x;
            dist = tMax.x;
            normal = vec3(inc.x, 0, 0);
            tMax.x += tDelta.x;
        }

        // Y is next
        else if (tMax.y < tMax.x && tMax.y < tMax.z) {
            pos.y += inc.y;
            dist = tMax.y;
            normal = vec3(0, inc.y, 0);
            tMax.y += tDelta.y;
        }

        // Z is next
        else if (tMax.z < tMax.x && tMax.z < tMax.y) {
            pos.z += inc.z;
            dist = tMax.z;
            normal = vec3(0, 0, inc.z);
            tMax.z += tDelta.z;
        }

        vec4 voxel = getVoxel(pos);

        if (voxel.a > 0.01) {
            if (!rayHit.hit) {
                rayHit.t = dist;
                //rayHit.normal = normal;
                rayHit.hit = true;
            }

            rayHit.color.rgb += rayHit.color.a * voxel.rgb * voxel.a;
            rayHit.color.a *= 1.0 - voxel.a;

            if (rayHit.color.a <= 0.01) {
                rayHit.color.a = 0;
                break;
            }
        }
    }

    rayHit.color.a = 1.0 - rayHit.color.a;

    return rayHit;
}

RaycastResult raycast(Ray ray) {

    RaycastResult result = RaycastResult(
        false,
        0,
        vec4(0)
    );

    Sphere sphere = Sphere(vec3(0, 0, -2), 0.5);
    
    vec3 oc = ray.o - sphere.c;
    float a = dot(ray.d, ray.d);
    float b = 2.0 * dot(oc, ray.d);
    float c = dot(oc, oc) - sphere.r * sphere.r;
    float discr = b * b - 4 * a * c;

    if (discr > 0) {
        result.t = (-b - sqrt(discr)) / (2.0 * a);

        if (result.t > 0.0) {
            result.hit = true;
            result.color = vec4(normalize((ray.o + ray.d * result.t) - sphere.c), 1);
        }
    }

    return result;
}

Ray genRay(vec2 screenPos) {
    return Ray(
        camera.position.xyz,
        mat3(camera.rotation) * normalize(vec3(screenPos.x, -screenPos.y, -1))
    );
}

void main() {

    float aspect = camera.screenSize.x / camera.screenSize.y;
    vec2 screenPos = (aspect > 1) ? 
        (gl_GlobalInvocationID.xy / camera.screenSize.x * 2.0 - vec2(1.0, 1.0 / aspect)) :
        (gl_GlobalInvocationID.xy / camera.screenSize.y * 2.0 - vec2(aspect, 1.0));

    Ray ray = genRay(screenPos);

    RaycastResult result = rayVoxel(ray);

    if (result.hit) {
        imageStore(writeImage, ivec2(gl_GlobalInvocationID.xy), result.color);
    } else {
        imageStore(writeImage, ivec2(gl_GlobalInvocationID.xy), vec4(0.2, 0.2, 0.2, 1));
    }
    
}